{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport { RuleList } from 'jss';\nvar at = '@global';\nvar atPrefix = '@global ';\nvar GlobalContainerRule = /*#__PURE__*/\nfunction () {\n  function GlobalContainerRule(key, styles, options) {\n    this.type = 'global';\n    this.at = at;\n    this.isProcessed = false;\n    this.key = key;\n    this.options = options;\n    this.rules = new RuleList(_extends({}, options, {\n      parent: this\n    }));\n    for (var selector in styles) {\n      this.rules.add(selector, styles[selector]);\n    }\n    this.rules.process();\n  }\n  /**\n   * Get a rule.\n   */\n\n  var _proto = GlobalContainerRule.prototype;\n  _proto.getRule = function getRule(name) {\n    return this.rules.get(name);\n  }\n  /**\n   * Create and register rule, run plugins.\n   */;\n\n  _proto.addRule = function addRule(name, style, options) {\n    var rule = this.rules.add(name, style, options);\n    if (rule) this.options.jss.plugins.onProcessRule(rule);\n    return rule;\n  }\n  /**\n   * Replace rule, run plugins.\n   */;\n\n  _proto.replaceRule = function replaceRule(name, style, options) {\n    var newRule = this.rules.replace(name, style, options);\n    if (newRule) this.options.jss.plugins.onProcessRule(newRule);\n    return newRule;\n  }\n  /**\n   * Get index of a rule.\n   */;\n\n  _proto.indexOf = function indexOf(rule) {\n    return this.rules.indexOf(rule);\n  }\n  /**\n   * Generates a CSS string.\n   */;\n\n  _proto.toString = function toString(options) {\n    return this.rules.toString(options);\n  };\n  return GlobalContainerRule;\n}();\nvar GlobalPrefixedRule = /*#__PURE__*/\nfunction () {\n  function GlobalPrefixedRule(key, style, options) {\n    this.type = 'global';\n    this.at = at;\n    this.isProcessed = false;\n    this.key = key;\n    this.options = options;\n    var selector = key.substr(atPrefix.length);\n    this.rule = options.jss.createRule(selector, style, _extends({}, options, {\n      parent: this\n    }));\n  }\n  var _proto2 = GlobalPrefixedRule.prototype;\n  _proto2.toString = function toString(options) {\n    return this.rule ? this.rule.toString(options) : '';\n  };\n  return GlobalPrefixedRule;\n}();\nvar separatorRegExp = /\\s*,\\s*/g;\nfunction addScope(selector, scope) {\n  var parts = selector.split(separatorRegExp);\n  var scoped = '';\n  for (var i = 0; i < parts.length; i++) {\n    scoped += scope + \" \" + parts[i].trim();\n    if (parts[i + 1]) scoped += ', ';\n  }\n  return scoped;\n}\nfunction handleNestedGlobalContainerRule(rule, sheet) {\n  var options = rule.options,\n    style = rule.style;\n  var rules = style ? style[at] : null;\n  if (!rules) return;\n  for (var name in rules) {\n    sheet.addRule(name, rules[name], _extends({}, options, {\n      selector: addScope(name, rule.selector)\n    }));\n  }\n  delete style[at];\n}\nfunction handlePrefixedGlobalRule(rule, sheet) {\n  var options = rule.options,\n    style = rule.style;\n  for (var prop in style) {\n    if (prop[0] !== '@' || prop.substr(0, at.length) !== at) continue;\n    var selector = addScope(prop.substr(at.length), rule.selector);\n    sheet.addRule(selector, style[prop], _extends({}, options, {\n      selector: selector\n    }));\n    delete style[prop];\n  }\n}\n/**\n * Convert nested rules to separate, remove them from original styles.\n */\n\nfunction jssGlobal() {\n  function onCreateRule(name, styles, options) {\n    if (!name) return null;\n    if (name === at) {\n      return new GlobalContainerRule(name, styles, options);\n    }\n    if (name[0] === '@' && name.substr(0, atPrefix.length) === atPrefix) {\n      return new GlobalPrefixedRule(name, styles, options);\n    }\n    var parent = options.parent;\n    if (parent) {\n      if (parent.type === 'global' || parent.options.parent && parent.options.parent.type === 'global') {\n        options.scoped = false;\n      }\n    }\n    if (!options.selector && options.scoped === false) {\n      options.selector = name;\n    }\n    return null;\n  }\n  function onProcessRule(rule, sheet) {\n    if (rule.type !== 'style' || !sheet) return;\n    handleNestedGlobalContainerRule(rule, sheet);\n    handlePrefixedGlobalRule(rule, sheet);\n  }\n  return {\n    onCreateRule: onCreateRule,\n    onProcessRule: onProcessRule\n  };\n}\nexport default jssGlobal;","map":null,"metadata":{},"sourceType":"module"}